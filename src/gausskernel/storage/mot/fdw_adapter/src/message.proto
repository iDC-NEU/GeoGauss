syntax = "proto3";

package merge;

message Transaction{  
  message Row{
    message Column {
      uint64 id = 1; // column id
      bytes value = 2; // column value/data
    }
    string tableName = 1;        
    bytes key = 2;
    uint32 type = 3; /// 0-update, 1-insert, 2-delete
    repeated Column column = 4;
    bytes data = 5;
  }
  repeated Row row = 2;
  uint64 StartEpoch = 3;
  uint64 CommitEpoch = 4;
  uint64 CSN = 5;
  uint64 server_id = 6;
  uint64 txnid = 7;
}

message Message {
    oneof type {
        Request request = 1;
        Response response = 2;
        Transaction txn = 3;
    }
}

/***********************************************
                Raft  REQUESTS
***********************************************/

message Request {
    oneof type {
        Ping ping = 1;
        Signal signal = 2;
        LookupMasterRequest lookup_master = 3;
        ForwardEpochRequest forward_epoch = 4;
        EpochReplicationAck epoch_replication_ack= 5;
        RaftPropose raft_propose = 6;
        RaftAcceptRequest raft_accept = 7;
        RaftCommitRequest raft_commit = 8;
        StatsRequest stats = 9;
        ChangeServerStateRequest change_server_state= 10;
    }
}

message Ping {
    int32 from = 1;
    int32 to = 2;
}

/**
 * Generic signal message
 */
message Signal {
  int32 from = 1;
}

message LookupMasterRequest {
    repeated uint64 txn_ids = 1;
    repeated bytes keys = 2;
}

message ForwardEpochRequest {
    int32 from = 1;
    int32 to = 2;
    uint64 epoch_id = 3;
}

message EpochReplicationAck {
    uint64 epoch_id = 1;
}

message RaftPropose {
    uint64 value = 1;
}

message RaftAcceptRequest {
    uint32 from = 1;
    uint32 to = 2;
    uint64 epoch_id = 3;
}

message RaftCommitRequest {
    uint32 from = 1;
    uint32 to = 2;
    uint64 epoch_id = 3;
}

message StatsRequest {
    uint32 from = 1;
    uint32 to = 2;
    uint32 level = 3;
}

message ChangeServerStateRequest {
    uint32 from = 1;
    uint32 to = 2;
    uint32 target = 3;
    uint32 state = 4;
    uint32 pull_server_id = 5;
    uint64 epoch_id = 6;
}

/***********************************************
                    RESPONSES
***********************************************/
/**
 * A response is always preceeded by a Request
 */
message Response {
    oneof type {
        Pong pong = 1;
        LookupMasterResponse lookup_master = 2;
        RaftAcceptResponse raft_accept = 3;
        RaftCommitResponse raft_commit = 4;
        StatsResponse stats = 5;
        ChangeServerStateResponse change_server_state = 6;
    }
}

/**
 * For debugging and testing purposes
 */
message Pong {
    int32 from = 1;
    int32 to = 2;
    int64 time = 3;
    int64 epoch_id = 4;
}

message MasterMetadata {
    uint32 master = 1;
    uint32 epoch_count = 2;
}

message KeyMasterMetadata {
    bytes key = 1;
    MasterMetadata metadata = 2;
}

message LookupMasterResponse {
    repeated uint64 epoch_id = 1;
    repeated KeyMasterMetadata lookup_results = 2;
}

message RaftAcceptResponse {
    uint32 from = 1;
    uint32 to = 2;
    uint64 epoch_id = 3;
    uint32 result = 4;
}

message RaftCommitResponse {
    uint32 from = 1;
    uint32 to = 2;
    uint64 epoch_id = 3;
    uint32 result = 4;
}

message StatsResponse {
    uint32 from = 1;
    uint64 to = 2;
    uint64 epoch_id = 3;
}

message ChangeServerStateResponse {
    uint32 from = 1;
    uint32 to = 2;
    uint32 target = 3;
    uint64 epoch_id = 4;
    uint32 state = 5;
}













message ServerMessage{
  message Msg{
    string key = 1;
    string value = 2;
  }
  string send_ip = 1;
  string receive_ip = 2;
  string port = 3;
  repeated Msg msg= 4;
  
  //uint32 type = 1;//server to master 消息类型 0:新增节点以及新增节点开始时间？ 1:server节点通报自己的情况 运行到了哪个epoch 
                  //2: server节点反馈 epoch size更新信息 3:server节点返回新增节点信息 4:cache server反馈存储信息相关 
                  //5：某节点请求相关epoch的写集，cache反馈有没有完整的epoch写集，有则发
                    //master to server 消息类型 0:新增节点 1:adjust epoch size 2:
  //uint32 server_id = 2;
  //string ip = 3;
  //uint64 physical_epoch = 4;//新epochsize开始时间epoch 发送给server进行修改自己的sleeptime或修改发送线程sleeptime
  //uint64 logical_epoch = 5;
  //uint64 epoch_size = 6;//新epochsize 或现有的epochsize大小
  //uint64 commit_time = 7;//提交耗时
  //uint64 send_time = 8; //用以确定网络时延，决定新epoch size开启时间
  //uint64 new_server_id = 9;
  //string new_server_ip = 10;
}
