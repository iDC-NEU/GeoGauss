// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace merge {
class MergeRequest;
class MergeRequestDefaultTypeInternal;
extern MergeRequestDefaultTypeInternal _MergeRequest_default_instance_;
class MergeRequest_Transaction;
class MergeRequest_TransactionDefaultTypeInternal;
extern MergeRequest_TransactionDefaultTypeInternal _MergeRequest_Transaction_default_instance_;
class MergeRequest_Transaction_Row;
class MergeRequest_Transaction_RowDefaultTypeInternal;
extern MergeRequest_Transaction_RowDefaultTypeInternal _MergeRequest_Transaction_Row_default_instance_;
class MergeRequest_Transaction_Row_Column;
class MergeRequest_Transaction_Row_ColumnDefaultTypeInternal;
extern MergeRequest_Transaction_Row_ColumnDefaultTypeInternal _MergeRequest_Transaction_Row_Column_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
}  // namespace merge
PROTOBUF_NAMESPACE_OPEN
template<> ::merge::MergeRequest* Arena::CreateMaybeMessage<::merge::MergeRequest>(Arena*);
template<> ::merge::MergeRequest_Transaction* Arena::CreateMaybeMessage<::merge::MergeRequest_Transaction>(Arena*);
template<> ::merge::MergeRequest_Transaction_Row* Arena::CreateMaybeMessage<::merge::MergeRequest_Transaction_Row>(Arena*);
template<> ::merge::MergeRequest_Transaction_Row_Column* Arena::CreateMaybeMessage<::merge::MergeRequest_Transaction_Row_Column>(Arena*);
template<> ::merge::ServerMessage* Arena::CreateMaybeMessage<::merge::ServerMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace merge {

// ===================================================================

class MergeRequest_Transaction_Row_Column :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:merge.MergeRequest.Transaction.Row.Column) */ {
 public:
  MergeRequest_Transaction_Row_Column();
  virtual ~MergeRequest_Transaction_Row_Column();

  MergeRequest_Transaction_Row_Column(const MergeRequest_Transaction_Row_Column& from);
  MergeRequest_Transaction_Row_Column(MergeRequest_Transaction_Row_Column&& from) noexcept
    : MergeRequest_Transaction_Row_Column() {
    *this = ::std::move(from);
  }

  inline MergeRequest_Transaction_Row_Column& operator=(const MergeRequest_Transaction_Row_Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeRequest_Transaction_Row_Column& operator=(MergeRequest_Transaction_Row_Column&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MergeRequest_Transaction_Row_Column& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeRequest_Transaction_Row_Column* internal_default_instance() {
    return reinterpret_cast<const MergeRequest_Transaction_Row_Column*>(
               &_MergeRequest_Transaction_Row_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MergeRequest_Transaction_Row_Column& a, MergeRequest_Transaction_Row_Column& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeRequest_Transaction_Row_Column* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeRequest_Transaction_Row_Column* New() const final {
    return CreateMaybeMessage<MergeRequest_Transaction_Row_Column>(nullptr);
  }

  MergeRequest_Transaction_Row_Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeRequest_Transaction_Row_Column>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeRequest_Transaction_Row_Column& from);
  void MergeFrom(const MergeRequest_Transaction_Row_Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeRequest_Transaction_Row_Column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "merge.MergeRequest.Transaction.Row.Column";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:merge.MergeRequest.Transaction.Row.Column)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MergeRequest_Transaction_Row :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:merge.MergeRequest.Transaction.Row) */ {
 public:
  MergeRequest_Transaction_Row();
  virtual ~MergeRequest_Transaction_Row();

  MergeRequest_Transaction_Row(const MergeRequest_Transaction_Row& from);
  MergeRequest_Transaction_Row(MergeRequest_Transaction_Row&& from) noexcept
    : MergeRequest_Transaction_Row() {
    *this = ::std::move(from);
  }

  inline MergeRequest_Transaction_Row& operator=(const MergeRequest_Transaction_Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeRequest_Transaction_Row& operator=(MergeRequest_Transaction_Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MergeRequest_Transaction_Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeRequest_Transaction_Row* internal_default_instance() {
    return reinterpret_cast<const MergeRequest_Transaction_Row*>(
               &_MergeRequest_Transaction_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MergeRequest_Transaction_Row& a, MergeRequest_Transaction_Row& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeRequest_Transaction_Row* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeRequest_Transaction_Row* New() const final {
    return CreateMaybeMessage<MergeRequest_Transaction_Row>(nullptr);
  }

  MergeRequest_Transaction_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeRequest_Transaction_Row>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeRequest_Transaction_Row& from);
  void MergeFrom(const MergeRequest_Transaction_Row& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeRequest_Transaction_Row* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "merge.MergeRequest.Transaction.Row";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MergeRequest_Transaction_Row_Column Column;

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 4,
    kTableNameFieldNumber = 1,
    kKeyFieldNumber = 2,
    kDataFieldNumber = 5,
    kTypeFieldNumber = 3,
  };
  // repeated .merge.MergeRequest.Transaction.Row.Column column = 4;
  int column_size() const;
  private:
  int _internal_column_size() const;
  public:
  void clear_column();
  ::merge::MergeRequest_Transaction_Row_Column* mutable_column(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction_Row_Column >*
      mutable_column();
  private:
  const ::merge::MergeRequest_Transaction_Row_Column& _internal_column(int index) const;
  ::merge::MergeRequest_Transaction_Row_Column* _internal_add_column();
  public:
  const ::merge::MergeRequest_Transaction_Row_Column& column(int index) const;
  ::merge::MergeRequest_Transaction_Row_Column* add_column();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction_Row_Column >&
      column() const;

  // string tableName = 1;
  void clear_tablename();
  const std::string& tablename() const;
  void set_tablename(const std::string& value);
  void set_tablename(std::string&& value);
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  std::string* mutable_tablename();
  std::string* release_tablename();
  void set_allocated_tablename(std::string* tablename);
  private:
  const std::string& _internal_tablename() const;
  void _internal_set_tablename(const std::string& value);
  std::string* _internal_mutable_tablename();
  public:

  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:merge.MergeRequest.Transaction.Row)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction_Row_Column > column_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tablename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MergeRequest_Transaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:merge.MergeRequest.Transaction) */ {
 public:
  MergeRequest_Transaction();
  virtual ~MergeRequest_Transaction();

  MergeRequest_Transaction(const MergeRequest_Transaction& from);
  MergeRequest_Transaction(MergeRequest_Transaction&& from) noexcept
    : MergeRequest_Transaction() {
    *this = ::std::move(from);
  }

  inline MergeRequest_Transaction& operator=(const MergeRequest_Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeRequest_Transaction& operator=(MergeRequest_Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MergeRequest_Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeRequest_Transaction* internal_default_instance() {
    return reinterpret_cast<const MergeRequest_Transaction*>(
               &_MergeRequest_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MergeRequest_Transaction& a, MergeRequest_Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeRequest_Transaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeRequest_Transaction* New() const final {
    return CreateMaybeMessage<MergeRequest_Transaction>(nullptr);
  }

  MergeRequest_Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeRequest_Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeRequest_Transaction& from);
  void MergeFrom(const MergeRequest_Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeRequest_Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "merge.MergeRequest.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MergeRequest_Transaction_Row Row;

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 2,
    kTxnIDFieldNumber = 1,
    kStartEpochFieldNumber = 3,
    kCommitEpochFieldNumber = 4,
    kCSNFieldNumber = 5,
    kServerIdFieldNumber = 6,
    kPackEpochFieldNumber = 8,
    kTypeFieldNumber = 7,
  };
  // repeated .merge.MergeRequest.Transaction.Row row = 2;
  int row_size() const;
  private:
  int _internal_row_size() const;
  public:
  void clear_row();
  ::merge::MergeRequest_Transaction_Row* mutable_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction_Row >*
      mutable_row();
  private:
  const ::merge::MergeRequest_Transaction_Row& _internal_row(int index) const;
  ::merge::MergeRequest_Transaction_Row* _internal_add_row();
  public:
  const ::merge::MergeRequest_Transaction_Row& row(int index) const;
  ::merge::MergeRequest_Transaction_Row* add_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction_Row >&
      row() const;

  // uint64 TxnID = 1;
  void clear_txnid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txnid() const;
  void set_txnid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txnid() const;
  void _internal_set_txnid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 StartEpoch = 3;
  void clear_startepoch();
  ::PROTOBUF_NAMESPACE_ID::uint64 startepoch() const;
  void set_startepoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_startepoch() const;
  void _internal_set_startepoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 CommitEpoch = 4;
  void clear_commitepoch();
  ::PROTOBUF_NAMESPACE_ID::uint64 commitepoch() const;
  void set_commitepoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commitepoch() const;
  void _internal_set_commitepoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 CSN = 5;
  void clear_csn();
  ::PROTOBUF_NAMESPACE_ID::uint64 csn() const;
  void set_csn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_csn() const;
  void _internal_set_csn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 server_id = 6;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pack_epoch = 8;
  void clear_pack_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_epoch() const;
  void set_pack_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_epoch() const;
  void _internal_set_pack_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool type = 7;
  void clear_type();
  bool type() const;
  void set_type(bool value);
  private:
  bool _internal_type() const;
  void _internal_set_type(bool value);
  public:

  // @@protoc_insertion_point(class_scope:merge.MergeRequest.Transaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction_Row > row_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txnid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 startepoch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commitepoch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 csn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_epoch_;
  bool type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MergeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:merge.MergeRequest) */ {
 public:
  MergeRequest();
  virtual ~MergeRequest();

  MergeRequest(const MergeRequest& from);
  MergeRequest(MergeRequest&& from) noexcept
    : MergeRequest() {
    *this = ::std::move(from);
  }

  inline MergeRequest& operator=(const MergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeRequest& operator=(MergeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MergeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeRequest* internal_default_instance() {
    return reinterpret_cast<const MergeRequest*>(
               &_MergeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MergeRequest& a, MergeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeRequest* New() const final {
    return CreateMaybeMessage<MergeRequest>(nullptr);
  }

  MergeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeRequest& from);
  void MergeFrom(const MergeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "merge.MergeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MergeRequest_Transaction Transaction;

  // accessors -------------------------------------------------------

  enum : int {
    kTxnFieldNumber = 1,
    kServerIdFieldNumber = 2,
    kEpochFieldNumber = 3,
    kPackIdFieldNumber = 4,
  };
  // repeated .merge.MergeRequest.Transaction Txn = 1;
  int txn_size() const;
  private:
  int _internal_txn_size() const;
  public:
  void clear_txn();
  ::merge::MergeRequest_Transaction* mutable_txn(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction >*
      mutable_txn();
  private:
  const ::merge::MergeRequest_Transaction& _internal_txn(int index) const;
  ::merge::MergeRequest_Transaction* _internal_add_txn();
  public:
  const ::merge::MergeRequest_Transaction& txn(int index) const;
  ::merge::MergeRequest_Transaction* add_txn();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction >&
      txn() const;

  // uint64 server_id = 2;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 epoch = 3;
  void clear_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint64 epoch() const;
  void set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_epoch() const;
  void _internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pack_id = 4;
  void clear_pack_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id() const;
  void set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_id() const;
  void _internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:merge.MergeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction > txn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:merge.ServerMessage) */ {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(nullptr);
  }

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "merge.ServerMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kNewServerIpFieldNumber = 10,
    kTypeFieldNumber = 1,
    kServerIdFieldNumber = 2,
    kPhysicalEpochFieldNumber = 4,
    kLogicalEpochFieldNumber = 5,
    kEpochSizeFieldNumber = 6,
    kCommitTimeFieldNumber = 7,
    kSendTimeFieldNumber = 8,
    kNewServerIdFieldNumber = 9,
  };
  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string new_server_ip = 10;
  void clear_new_server_ip();
  const std::string& new_server_ip() const;
  void set_new_server_ip(const std::string& value);
  void set_new_server_ip(std::string&& value);
  void set_new_server_ip(const char* value);
  void set_new_server_ip(const char* value, size_t size);
  std::string* mutable_new_server_ip();
  std::string* release_new_server_ip();
  void set_allocated_new_server_ip(std::string* new_server_ip);
  private:
  const std::string& _internal_new_server_ip() const;
  void _internal_set_new_server_ip(const std::string& value);
  std::string* _internal_mutable_new_server_ip();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 server_id = 2;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 physical_epoch = 4;
  void clear_physical_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint64 physical_epoch() const;
  void set_physical_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_physical_epoch() const;
  void _internal_set_physical_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 logical_epoch = 5;
  void clear_logical_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint64 logical_epoch() const;
  void set_logical_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_logical_epoch() const;
  void _internal_set_logical_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 epoch_size = 6;
  void clear_epoch_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 epoch_size() const;
  void set_epoch_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_epoch_size() const;
  void _internal_set_epoch_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 commit_time = 7;
  void clear_commit_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_time() const;
  void set_commit_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_time() const;
  void _internal_set_commit_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 send_time = 8;
  void clear_send_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 send_time() const;
  void set_send_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send_time() const;
  void _internal_set_send_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 new_server_id = 9;
  void clear_new_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_server_id() const;
  void set_new_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_new_server_id() const;
  void _internal_set_new_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:merge.ServerMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_server_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 physical_epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 logical_epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 epoch_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MergeRequest_Transaction_Row_Column

// uint64 id = 1;
inline void MergeRequest_Transaction_Row_Column::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction_Row_Column::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction_Row_Column::id() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.Row.Column.id)
  return _internal_id();
}
inline void MergeRequest_Transaction_Row_Column::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void MergeRequest_Transaction_Row_Column::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.Row.Column.id)
}

// bytes value = 2;
inline void MergeRequest_Transaction_Row_Column::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MergeRequest_Transaction_Row_Column::value() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.Row.Column.value)
  return _internal_value();
}
inline void MergeRequest_Transaction_Row_Column::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.Row.Column.value)
}
inline std::string* MergeRequest_Transaction_Row_Column::mutable_value() {
  // @@protoc_insertion_point(field_mutable:merge.MergeRequest.Transaction.Row.Column.value)
  return _internal_mutable_value();
}
inline const std::string& MergeRequest_Transaction_Row_Column::_internal_value() const {
  return value_.GetNoArena();
}
inline void MergeRequest_Transaction_Row_Column::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MergeRequest_Transaction_Row_Column::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:merge.MergeRequest.Transaction.Row.Column.value)
}
inline void MergeRequest_Transaction_Row_Column::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:merge.MergeRequest.Transaction.Row.Column.value)
}
inline void MergeRequest_Transaction_Row_Column::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:merge.MergeRequest.Transaction.Row.Column.value)
}
inline std::string* MergeRequest_Transaction_Row_Column::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MergeRequest_Transaction_Row_Column::release_value() {
  // @@protoc_insertion_point(field_release:merge.MergeRequest.Transaction.Row.Column.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MergeRequest_Transaction_Row_Column::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:merge.MergeRequest.Transaction.Row.Column.value)
}

// -------------------------------------------------------------------

// MergeRequest_Transaction_Row

// string tableName = 1;
inline void MergeRequest_Transaction_Row::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MergeRequest_Transaction_Row::tablename() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.Row.tableName)
  return _internal_tablename();
}
inline void MergeRequest_Transaction_Row::set_tablename(const std::string& value) {
  _internal_set_tablename(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.Row.tableName)
}
inline std::string* MergeRequest_Transaction_Row::mutable_tablename() {
  // @@protoc_insertion_point(field_mutable:merge.MergeRequest.Transaction.Row.tableName)
  return _internal_mutable_tablename();
}
inline const std::string& MergeRequest_Transaction_Row::_internal_tablename() const {
  return tablename_.GetNoArena();
}
inline void MergeRequest_Transaction_Row::_internal_set_tablename(const std::string& value) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MergeRequest_Transaction_Row::set_tablename(std::string&& value) {
  
  tablename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:merge.MergeRequest.Transaction.Row.tableName)
}
inline void MergeRequest_Transaction_Row::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:merge.MergeRequest.Transaction.Row.tableName)
}
inline void MergeRequest_Transaction_Row::set_tablename(const char* value, size_t size) {
  
  tablename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:merge.MergeRequest.Transaction.Row.tableName)
}
inline std::string* MergeRequest_Transaction_Row::_internal_mutable_tablename() {
  
  return tablename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MergeRequest_Transaction_Row::release_tablename() {
  // @@protoc_insertion_point(field_release:merge.MergeRequest.Transaction.Row.tableName)
  
  return tablename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MergeRequest_Transaction_Row::set_allocated_tablename(std::string* tablename) {
  if (tablename != nullptr) {
    
  } else {
    
  }
  tablename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:merge.MergeRequest.Transaction.Row.tableName)
}

// bytes key = 2;
inline void MergeRequest_Transaction_Row::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MergeRequest_Transaction_Row::key() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.Row.key)
  return _internal_key();
}
inline void MergeRequest_Transaction_Row::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.Row.key)
}
inline std::string* MergeRequest_Transaction_Row::mutable_key() {
  // @@protoc_insertion_point(field_mutable:merge.MergeRequest.Transaction.Row.key)
  return _internal_mutable_key();
}
inline const std::string& MergeRequest_Transaction_Row::_internal_key() const {
  return key_.GetNoArena();
}
inline void MergeRequest_Transaction_Row::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MergeRequest_Transaction_Row::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:merge.MergeRequest.Transaction.Row.key)
}
inline void MergeRequest_Transaction_Row::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:merge.MergeRequest.Transaction.Row.key)
}
inline void MergeRequest_Transaction_Row::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:merge.MergeRequest.Transaction.Row.key)
}
inline std::string* MergeRequest_Transaction_Row::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MergeRequest_Transaction_Row::release_key() {
  // @@protoc_insertion_point(field_release:merge.MergeRequest.Transaction.Row.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MergeRequest_Transaction_Row::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:merge.MergeRequest.Transaction.Row.key)
}

// uint32 type = 3;
inline void MergeRequest_Transaction_Row::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeRequest_Transaction_Row::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MergeRequest_Transaction_Row::type() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.Row.type)
  return _internal_type();
}
inline void MergeRequest_Transaction_Row::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void MergeRequest_Transaction_Row::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.Row.type)
}

// repeated .merge.MergeRequest.Transaction.Row.Column column = 4;
inline int MergeRequest_Transaction_Row::_internal_column_size() const {
  return column_.size();
}
inline int MergeRequest_Transaction_Row::column_size() const {
  return _internal_column_size();
}
inline void MergeRequest_Transaction_Row::clear_column() {
  column_.Clear();
}
inline ::merge::MergeRequest_Transaction_Row_Column* MergeRequest_Transaction_Row::mutable_column(int index) {
  // @@protoc_insertion_point(field_mutable:merge.MergeRequest.Transaction.Row.column)
  return column_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction_Row_Column >*
MergeRequest_Transaction_Row::mutable_column() {
  // @@protoc_insertion_point(field_mutable_list:merge.MergeRequest.Transaction.Row.column)
  return &column_;
}
inline const ::merge::MergeRequest_Transaction_Row_Column& MergeRequest_Transaction_Row::_internal_column(int index) const {
  return column_.Get(index);
}
inline const ::merge::MergeRequest_Transaction_Row_Column& MergeRequest_Transaction_Row::column(int index) const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.Row.column)
  return _internal_column(index);
}
inline ::merge::MergeRequest_Transaction_Row_Column* MergeRequest_Transaction_Row::_internal_add_column() {
  return column_.Add();
}
inline ::merge::MergeRequest_Transaction_Row_Column* MergeRequest_Transaction_Row::add_column() {
  // @@protoc_insertion_point(field_add:merge.MergeRequest.Transaction.Row.column)
  return _internal_add_column();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction_Row_Column >&
MergeRequest_Transaction_Row::column() const {
  // @@protoc_insertion_point(field_list:merge.MergeRequest.Transaction.Row.column)
  return column_;
}

// bytes data = 5;
inline void MergeRequest_Transaction_Row::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MergeRequest_Transaction_Row::data() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.Row.data)
  return _internal_data();
}
inline void MergeRequest_Transaction_Row::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.Row.data)
}
inline std::string* MergeRequest_Transaction_Row::mutable_data() {
  // @@protoc_insertion_point(field_mutable:merge.MergeRequest.Transaction.Row.data)
  return _internal_mutable_data();
}
inline const std::string& MergeRequest_Transaction_Row::_internal_data() const {
  return data_.GetNoArena();
}
inline void MergeRequest_Transaction_Row::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MergeRequest_Transaction_Row::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:merge.MergeRequest.Transaction.Row.data)
}
inline void MergeRequest_Transaction_Row::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:merge.MergeRequest.Transaction.Row.data)
}
inline void MergeRequest_Transaction_Row::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:merge.MergeRequest.Transaction.Row.data)
}
inline std::string* MergeRequest_Transaction_Row::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MergeRequest_Transaction_Row::release_data() {
  // @@protoc_insertion_point(field_release:merge.MergeRequest.Transaction.Row.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MergeRequest_Transaction_Row::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:merge.MergeRequest.Transaction.Row.data)
}

// -------------------------------------------------------------------

// MergeRequest_Transaction

// uint64 TxnID = 1;
inline void MergeRequest_Transaction::clear_txnid() {
  txnid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::_internal_txnid() const {
  return txnid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::txnid() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.TxnID)
  return _internal_txnid();
}
inline void MergeRequest_Transaction::_internal_set_txnid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  txnid_ = value;
}
inline void MergeRequest_Transaction::set_txnid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txnid(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.TxnID)
}

// repeated .merge.MergeRequest.Transaction.Row row = 2;
inline int MergeRequest_Transaction::_internal_row_size() const {
  return row_.size();
}
inline int MergeRequest_Transaction::row_size() const {
  return _internal_row_size();
}
inline void MergeRequest_Transaction::clear_row() {
  row_.Clear();
}
inline ::merge::MergeRequest_Transaction_Row* MergeRequest_Transaction::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:merge.MergeRequest.Transaction.row)
  return row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction_Row >*
MergeRequest_Transaction::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:merge.MergeRequest.Transaction.row)
  return &row_;
}
inline const ::merge::MergeRequest_Transaction_Row& MergeRequest_Transaction::_internal_row(int index) const {
  return row_.Get(index);
}
inline const ::merge::MergeRequest_Transaction_Row& MergeRequest_Transaction::row(int index) const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.row)
  return _internal_row(index);
}
inline ::merge::MergeRequest_Transaction_Row* MergeRequest_Transaction::_internal_add_row() {
  return row_.Add();
}
inline ::merge::MergeRequest_Transaction_Row* MergeRequest_Transaction::add_row() {
  // @@protoc_insertion_point(field_add:merge.MergeRequest.Transaction.row)
  return _internal_add_row();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction_Row >&
MergeRequest_Transaction::row() const {
  // @@protoc_insertion_point(field_list:merge.MergeRequest.Transaction.row)
  return row_;
}

// uint64 StartEpoch = 3;
inline void MergeRequest_Transaction::clear_startepoch() {
  startepoch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::_internal_startepoch() const {
  return startepoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::startepoch() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.StartEpoch)
  return _internal_startepoch();
}
inline void MergeRequest_Transaction::_internal_set_startepoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  startepoch_ = value;
}
inline void MergeRequest_Transaction::set_startepoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_startepoch(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.StartEpoch)
}

// uint64 CommitEpoch = 4;
inline void MergeRequest_Transaction::clear_commitepoch() {
  commitepoch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::_internal_commitepoch() const {
  return commitepoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::commitepoch() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.CommitEpoch)
  return _internal_commitepoch();
}
inline void MergeRequest_Transaction::_internal_set_commitepoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commitepoch_ = value;
}
inline void MergeRequest_Transaction::set_commitepoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commitepoch(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.CommitEpoch)
}

// uint64 CSN = 5;
inline void MergeRequest_Transaction::clear_csn() {
  csn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::_internal_csn() const {
  return csn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::csn() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.CSN)
  return _internal_csn();
}
inline void MergeRequest_Transaction::_internal_set_csn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  csn_ = value;
}
inline void MergeRequest_Transaction::set_csn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_csn(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.CSN)
}

// uint64 server_id = 6;
inline void MergeRequest_Transaction::clear_server_id() {
  server_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::server_id() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.server_id)
  return _internal_server_id();
}
inline void MergeRequest_Transaction::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_id_ = value;
}
inline void MergeRequest_Transaction::set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.server_id)
}

// bool type = 7;
inline void MergeRequest_Transaction::clear_type() {
  type_ = false;
}
inline bool MergeRequest_Transaction::_internal_type() const {
  return type_;
}
inline bool MergeRequest_Transaction::type() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.type)
  return _internal_type();
}
inline void MergeRequest_Transaction::_internal_set_type(bool value) {
  
  type_ = value;
}
inline void MergeRequest_Transaction::set_type(bool value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.type)
}

// uint64 pack_epoch = 8;
inline void MergeRequest_Transaction::clear_pack_epoch() {
  pack_epoch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::_internal_pack_epoch() const {
  return pack_epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest_Transaction::pack_epoch() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Transaction.pack_epoch)
  return _internal_pack_epoch();
}
inline void MergeRequest_Transaction::_internal_set_pack_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_epoch_ = value;
}
inline void MergeRequest_Transaction::set_pack_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_epoch(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.Transaction.pack_epoch)
}

// -------------------------------------------------------------------

// MergeRequest

// repeated .merge.MergeRequest.Transaction Txn = 1;
inline int MergeRequest::_internal_txn_size() const {
  return txn_.size();
}
inline int MergeRequest::txn_size() const {
  return _internal_txn_size();
}
inline void MergeRequest::clear_txn() {
  txn_.Clear();
}
inline ::merge::MergeRequest_Transaction* MergeRequest::mutable_txn(int index) {
  // @@protoc_insertion_point(field_mutable:merge.MergeRequest.Txn)
  return txn_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction >*
MergeRequest::mutable_txn() {
  // @@protoc_insertion_point(field_mutable_list:merge.MergeRequest.Txn)
  return &txn_;
}
inline const ::merge::MergeRequest_Transaction& MergeRequest::_internal_txn(int index) const {
  return txn_.Get(index);
}
inline const ::merge::MergeRequest_Transaction& MergeRequest::txn(int index) const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.Txn)
  return _internal_txn(index);
}
inline ::merge::MergeRequest_Transaction* MergeRequest::_internal_add_txn() {
  return txn_.Add();
}
inline ::merge::MergeRequest_Transaction* MergeRequest::add_txn() {
  // @@protoc_insertion_point(field_add:merge.MergeRequest.Txn)
  return _internal_add_txn();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::merge::MergeRequest_Transaction >&
MergeRequest::txn() const {
  // @@protoc_insertion_point(field_list:merge.MergeRequest.Txn)
  return txn_;
}

// uint64 server_id = 2;
inline void MergeRequest::clear_server_id() {
  server_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest::server_id() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.server_id)
  return _internal_server_id();
}
inline void MergeRequest::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_id_ = value;
}
inline void MergeRequest::set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.server_id)
}

// uint64 epoch = 3;
inline void MergeRequest::clear_epoch() {
  epoch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest::_internal_epoch() const {
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest::epoch() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.epoch)
  return _internal_epoch();
}
inline void MergeRequest::_internal_set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  epoch_ = value;
}
inline void MergeRequest::set_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.epoch)
}

// uint64 pack_id = 4;
inline void MergeRequest::clear_pack_id() {
  pack_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest::_internal_pack_id() const {
  return pack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeRequest::pack_id() const {
  // @@protoc_insertion_point(field_get:merge.MergeRequest.pack_id)
  return _internal_pack_id();
}
inline void MergeRequest::_internal_set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_id_ = value;
}
inline void MergeRequest::set_pack_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_id(value);
  // @@protoc_insertion_point(field_set:merge.MergeRequest.pack_id)
}

// -------------------------------------------------------------------

// ServerMessage

// uint32 type = 1;
inline void ServerMessage::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerMessage::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerMessage::type() const {
  // @@protoc_insertion_point(field_get:merge.ServerMessage.type)
  return _internal_type();
}
inline void ServerMessage::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void ServerMessage::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:merge.ServerMessage.type)
}

// uint32 server_id = 2;
inline void ServerMessage::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerMessage::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerMessage::server_id() const {
  // @@protoc_insertion_point(field_get:merge.ServerMessage.server_id)
  return _internal_server_id();
}
inline void ServerMessage::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void ServerMessage::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:merge.ServerMessage.server_id)
}

// string ip = 3;
inline void ServerMessage::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerMessage::ip() const {
  // @@protoc_insertion_point(field_get:merge.ServerMessage.ip)
  return _internal_ip();
}
inline void ServerMessage::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:merge.ServerMessage.ip)
}
inline std::string* ServerMessage::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:merge.ServerMessage.ip)
  return _internal_mutable_ip();
}
inline const std::string& ServerMessage::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void ServerMessage::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerMessage::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:merge.ServerMessage.ip)
}
inline void ServerMessage::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:merge.ServerMessage.ip)
}
inline void ServerMessage::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:merge.ServerMessage.ip)
}
inline std::string* ServerMessage::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerMessage::release_ip() {
  // @@protoc_insertion_point(field_release:merge.ServerMessage.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMessage::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:merge.ServerMessage.ip)
}

// uint64 physical_epoch = 4;
inline void ServerMessage::clear_physical_epoch() {
  physical_epoch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::_internal_physical_epoch() const {
  return physical_epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::physical_epoch() const {
  // @@protoc_insertion_point(field_get:merge.ServerMessage.physical_epoch)
  return _internal_physical_epoch();
}
inline void ServerMessage::_internal_set_physical_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  physical_epoch_ = value;
}
inline void ServerMessage::set_physical_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_physical_epoch(value);
  // @@protoc_insertion_point(field_set:merge.ServerMessage.physical_epoch)
}

// uint64 logical_epoch = 5;
inline void ServerMessage::clear_logical_epoch() {
  logical_epoch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::_internal_logical_epoch() const {
  return logical_epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::logical_epoch() const {
  // @@protoc_insertion_point(field_get:merge.ServerMessage.logical_epoch)
  return _internal_logical_epoch();
}
inline void ServerMessage::_internal_set_logical_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  logical_epoch_ = value;
}
inline void ServerMessage::set_logical_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_logical_epoch(value);
  // @@protoc_insertion_point(field_set:merge.ServerMessage.logical_epoch)
}

// uint64 epoch_size = 6;
inline void ServerMessage::clear_epoch_size() {
  epoch_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::_internal_epoch_size() const {
  return epoch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::epoch_size() const {
  // @@protoc_insertion_point(field_get:merge.ServerMessage.epoch_size)
  return _internal_epoch_size();
}
inline void ServerMessage::_internal_set_epoch_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  epoch_size_ = value;
}
inline void ServerMessage::set_epoch_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_epoch_size(value);
  // @@protoc_insertion_point(field_set:merge.ServerMessage.epoch_size)
}

// uint64 commit_time = 7;
inline void ServerMessage::clear_commit_time() {
  commit_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::_internal_commit_time() const {
  return commit_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::commit_time() const {
  // @@protoc_insertion_point(field_get:merge.ServerMessage.commit_time)
  return _internal_commit_time();
}
inline void ServerMessage::_internal_set_commit_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_time_ = value;
}
inline void ServerMessage::set_commit_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_time(value);
  // @@protoc_insertion_point(field_set:merge.ServerMessage.commit_time)
}

// uint64 send_time = 8;
inline void ServerMessage::clear_send_time() {
  send_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::_internal_send_time() const {
  return send_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::send_time() const {
  // @@protoc_insertion_point(field_get:merge.ServerMessage.send_time)
  return _internal_send_time();
}
inline void ServerMessage::_internal_set_send_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  send_time_ = value;
}
inline void ServerMessage::set_send_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send_time(value);
  // @@protoc_insertion_point(field_set:merge.ServerMessage.send_time)
}

// uint64 new_server_id = 9;
inline void ServerMessage::clear_new_server_id() {
  new_server_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::_internal_new_server_id() const {
  return new_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerMessage::new_server_id() const {
  // @@protoc_insertion_point(field_get:merge.ServerMessage.new_server_id)
  return _internal_new_server_id();
}
inline void ServerMessage::_internal_set_new_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  new_server_id_ = value;
}
inline void ServerMessage::set_new_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_new_server_id(value);
  // @@protoc_insertion_point(field_set:merge.ServerMessage.new_server_id)
}

// string new_server_ip = 10;
inline void ServerMessage::clear_new_server_ip() {
  new_server_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerMessage::new_server_ip() const {
  // @@protoc_insertion_point(field_get:merge.ServerMessage.new_server_ip)
  return _internal_new_server_ip();
}
inline void ServerMessage::set_new_server_ip(const std::string& value) {
  _internal_set_new_server_ip(value);
  // @@protoc_insertion_point(field_set:merge.ServerMessage.new_server_ip)
}
inline std::string* ServerMessage::mutable_new_server_ip() {
  // @@protoc_insertion_point(field_mutable:merge.ServerMessage.new_server_ip)
  return _internal_mutable_new_server_ip();
}
inline const std::string& ServerMessage::_internal_new_server_ip() const {
  return new_server_ip_.GetNoArena();
}
inline void ServerMessage::_internal_set_new_server_ip(const std::string& value) {
  
  new_server_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServerMessage::set_new_server_ip(std::string&& value) {
  
  new_server_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:merge.ServerMessage.new_server_ip)
}
inline void ServerMessage::set_new_server_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_server_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:merge.ServerMessage.new_server_ip)
}
inline void ServerMessage::set_new_server_ip(const char* value, size_t size) {
  
  new_server_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:merge.ServerMessage.new_server_ip)
}
inline std::string* ServerMessage::_internal_mutable_new_server_ip() {
  
  return new_server_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerMessage::release_new_server_ip() {
  // @@protoc_insertion_point(field_release:merge.ServerMessage.new_server_ip)
  
  return new_server_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMessage::set_allocated_new_server_ip(std::string* new_server_ip) {
  if (new_server_ip != nullptr) {
    
  } else {
    
  }
  new_server_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_server_ip);
  // @@protoc_insertion_point(field_set_allocated:merge.ServerMessage.new_server_ip)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace merge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
